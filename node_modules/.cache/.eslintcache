[{"E:\\practice\\hooks-context\\react-hooks\\src\\index.js":"1","E:\\practice\\hooks-context\\react-hooks\\src\\App.js":"2","E:\\practice\\hooks-context\\react-hooks\\src\\reportWebVitals.js":"3","E:\\practice\\hooks-context\\react-hooks\\src\\components\\Form.js":"4","E:\\practice\\hooks-context\\react-hooks\\src\\components\\To-do-list.js":"5","E:\\practice\\hooks-context\\react-hooks\\src\\components\\ListGrid.js":"6","E:\\practice\\hooks-context\\react-hooks\\src\\components\\Task.js":"7","E:\\practice\\hooks-context\\react-hooks\\src\\reducer.js":"8"},{"size":500,"mtime":1639488188212,"results":"9","hashOfConfig":"10"},{"size":324,"mtime":1640605014502,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1639488188450,"results":"12","hashOfConfig":"10"},{"size":1910,"mtime":1640629792370,"results":"13","hashOfConfig":"10"},{"size":920,"mtime":1640629970453,"results":"14","hashOfConfig":"10"},{"size":439,"mtime":1640629659129,"results":"15","hashOfConfig":"10"},{"size":529,"mtime":1640629008790,"results":"16","hashOfConfig":"10"},{"size":413,"mtime":1640628790546,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"z23we2",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\practice\\hooks-context\\react-hooks\\src\\index.js",[],["39","40"],"E:\\practice\\hooks-context\\react-hooks\\src\\App.js",["41","42","43","44"],"import React, { useState, useContext } from \"react\";\nimport Form from './components/Form';\nimport ToDoList from \"./components/To-do-list\";\n\nfunction App() {\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  return (\n    <div className=\"App full-center\">\n     <ToDoList/>\n    </div>\n  )\n}\n\nexport default App;\n","E:\\practice\\hooks-context\\react-hooks\\src\\reportWebVitals.js",[],"E:\\practice\\hooks-context\\react-hooks\\src\\components\\Form.js",["45","46"],"import React, { useState, useReducer, useContext } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport TimePicker from \"react-time-picker\";\r\nimport { listReducer } from \"../reducer\";\r\nimport { ListContext } from \"./To-do-list\";\r\nconst Form = () => {\r\n  const [text, setText] = useState('');\r\n  const [date ,setDate] = useState(new Date())\r\n  const [time, onChange] = useState('10:00');\r\n  const dispatch = useContext(ListContext);\r\n  \r\n  const addTask = (e) => {\r\n    e.preventDefault();\r\n    if(date && time && text) {\r\n      dispatch({type:'ADD_TASK' ,text ,date : date.toISOString().split('T')[0], time})\r\n    } else {\r\n      console.log('nothing');\r\n    }\r\n    clearForm();\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setText('');\r\n    setDate('');\r\n    onChange('')\r\n  }\r\n  \r\n  return (\r\n    <form className=\"form flex\">\r\n      <h1 onClick = {() => console.log(date.toISOString().split('T')[0])}>To-Do List App </h1>\r\n      <div className=\"row\">\r\n        <input\r\n          value={text}\r\n          onChange={(e) => {setText(e.target.value)}}\r\n          className=\"border\"\r\n          type=\"text\"\r\n          placeholder=\"Enter the task\"\r\n          alt=\"do\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"w-100 main-container\">\r\n        <div className=\"container-one\">\r\n          <TimePicker alt=\"time\" onChange={onChange}\r\n          value={time}/>\r\n        </div>\r\n        <div className=\"container-two\">\r\n          <DatePicker  selected={date} onChange = {(date) => {setDate(date)}}  alt=\"date\" className=\"full-center date-picker-manual\" />\r\n        </div>\r\n        <div className=\"container-three\">\r\n          <input\r\n            onClick={(e) => {addTask(e)}}\r\n            value=\"Add\"\r\n            className=\"submit \"\r\n            type=\"submit\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","E:\\practice\\hooks-context\\react-hooks\\src\\components\\To-do-list.js",["47"],"import React, { useState, useReducer, createContext } from \"react\";\r\nimport ListGrid from \"./ListGrid\";\r\nimport Form from \"./Form\";\r\nimport { listReducer } from \"../reducer\";\r\n\r\nexport const ListContext = createContext();\r\n\r\nconst ToDoList = () => {\r\n  const [tasks, setTask] = useState([\r\n    { do: \"goint to the gym\", date: \"20/10/2021\", time: \"10:20\",id:Math.random() },\r\n    { do: \"goint to the gym\", date: \"20/10/2021\", time: \"10:20\",id:Math.random() },\r\n    { do: \"goint to the gym\", date: \"20/10/2021\", time: \"10:20\",id:Math.random() },\r\n  ]);\r\n  \r\n  const [state, dispatch] = useReducer(listReducer, tasks);\r\n  React.useEffect(() => {\r\n      console.log(state);\r\n  })\r\n  return (\r\n    <ListContext.Provider value={dispatch}>\r\n      <div className=\"main-to-do-list\">\r\n        \r\n        <Form />\r\n        <ListGrid tasks={state} />\r\n      </div>\r\n    </ListContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","E:\\practice\\hooks-context\\react-hooks\\src\\components\\ListGrid.js",["48","49"],"import Task from \"./Task\";\r\nimport { createContext } from \"react\";\r\n\r\n\r\n\r\nconst ListGrid = ({ tasks }) => {\r\n  const style = {textAlign:'center', fontFamily:\"sans-serif\", fontWeight:'400'}\r\n  return (\r\n      <>\r\n      {tasks.length == 0 ? <h1 style={style}>no tasks to added !</h1> : null}\r\n        {tasks.map((task) => (\r\n          <Task key = {Math.random()} task={task} />\r\n        ))}\r\n      </>\r\n  );\r\n};\r\n\r\nexport default ListGrid;\r\n","E:\\practice\\hooks-context\\react-hooks\\src\\components\\Task.js",[],"E:\\practice\\hooks-context\\react-hooks\\src\\reducer.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":37},{"ruleId":"54","severity":1,"message":"58","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"59","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":22},{"ruleId":"54","severity":1,"message":"60","line":6,"column":24,"nodeType":"56","messageId":"57","endLine":6,"endColumn":39},{"ruleId":"54","severity":1,"message":"61","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":37},{"ruleId":"54","severity":1,"message":"62","line":5,"column":10,"nodeType":"56","messageId":"57","endLine":5,"endColumn":21},{"ruleId":"54","severity":1,"message":"63","line":9,"column":17,"nodeType":"56","messageId":"57","endLine":9,"endColumn":24},{"ruleId":"54","severity":1,"message":"64","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":10,"column":21,"nodeType":"67","messageId":"68","endLine":10,"endColumn":23},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'selectedDate' is assigned a value but never used.","'setSelectedDate' is assigned a value but never used.","'useReducer' is defined but never used.","'listReducer' is defined but never used.","'setTask' is assigned a value but never used.","'createContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]